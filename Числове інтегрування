#методом прямокутників за умови п=10; 
import numpy as np
def f(x):
    return 1 / (np.sqrt(x + 3))

def rectangle_method(a, b, n):
    h = (b - a) / n
    result = 0
    for i in range(n):
        x_i = a + i * h
        result += f(x_i)
    result *= h
    return result

a = 0.4
b = 1.2
p = 10

result = rectangle_method(a, b, p)
print(f"Значення інтегралу методом прямокутників: {result:.4f}")

#методом Сімпсона за умови п=8; 
import math

def f(x):
    return (2 * x + 0.5) * math.sin(x)

def simpson_method(a, b, n):
    h = (b - a) / n
    result = f(a) + f(b)

    for i in range(1, n):
        x_i = a + i * h
        result += 4 * f(x_i) if i % 2 != 0 else 2 * f(x_i)

    result *= h / 3
    return result

a = 0.4
b = 1.2
p = 8

result = simpson_method(a, b, p)
print(f"Значення інтегралу методом Сімпсона: {result:.4f}")

#методом трапецій за умови п=20;
import numpy as np

def f(x):
    return 1 / np.sqrt((0.5 * x) ** 2 + 1.5)

def trapezoidal_method(a, b, n):
    h = (b - a) / n
    result = 0.5 * (f(a) + f(b))

    for i in range(1, n):
        x_i = a + i * h
        result += f(x_i)

    result *= h
    return result

a = 1.2
b = 2
p = 20

result = trapezoidal_method(a, b, p)
print(f"Значення інтегралу методом трапецій: {result:.4f}")
