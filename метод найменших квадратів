#аналітичні розрахунки
import numpy as np

def f(x):
    return 2 * np.sin(5 * x)

i = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
xi = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])

print("   i   |   x   |   y")
for idx, x in zip(i, xi):
    y = f(x)
    print(f"  {idx}   |  {x:.1f} |  {y:.4f}")

#графіки і наближення
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

x = np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])
y = np.array([0.9589, 1.6829, 1.9950, 1.8186, 1.1969, 0.2822, -0.7016, -1.5136, -1.9551, -1.9178])

def f(x, a, b):
    return a * x + b

def quadratic(x, a, b, c):
    return a * x**2 + b * x + c

#наближення прямою
params_linear, covariance_linear = curve_fit(f, x, y)
x_fit_linear = np.linspace(x.min(), x.max(), 100)
y_fit_linear = f(x_fit_linear, *params_linear)

#наближення параболою
params_quadratic, covariance_quadratic = curve_fit(quadratic, x, y)
x_fit_quadratic = np.linspace(x.min(), x.max(), 100)
y_fit_quadratic = quadratic(x_fit_quadratic, *params_quadratic)

#графіки
plt.scatter(x, y, label='Дані')
plt.plot(x_fit_linear, y_fit_linear, label='Наближення прямою', linestyle='--')
plt.plot(x_fit_quadratic, y_fit_quadratic, label='Наближення параболою', linestyle='--')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.legend()
plt.show()

print("Коефіцієнти для наближення прямою:", params_linear)
print("Коефіцієнти для наближення параболою:", params_quadratic)
